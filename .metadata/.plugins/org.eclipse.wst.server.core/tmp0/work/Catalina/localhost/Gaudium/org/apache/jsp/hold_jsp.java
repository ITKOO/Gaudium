/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.5
 * Generated at: 2018-05-10 02:40:25 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.io.PrintWriter;
import java.util.Date;

public final class hold_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.io.PrintWriter");
    _jspx_imports_classes.add("java.util.Date");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"ko\">\r\n");
      out.write("<head>\r\n");
      out.write("    <meta charset=\"UTF-8\">\r\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n");
      out.write("    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\r\n");
      out.write("    <title>Gaudium</title>\r\n");
      out.write("    <link href=\"https://fonts.googleapis.com/css?family=Pacifico|Nanum+Gothic|Yeon+Sung\" rel=\"stylesheet\">\r\n");
      out.write("    <link rel = \"stylesheet\" href=\"css/style.css\">\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("<body>\r\n");
      out.write("    <!-- 상단 Gaudium 메뉴바 -->\r\n");
      out.write("   ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "menuBar.jsp", out, false);
      out.write("\r\n");
      out.write("   \r\n");
      out.write("       <div class = \"hold\">\r\n");
      out.write("            <br><br><br>\r\n");
      out.write("            <form method = \"post\" action = \"holdProc.jsp\">\r\n");
      out.write("                <label for = \"eventName\" class = \"inputLabel\">행사명</label>\r\n");
      out.write("                <input type=\"text\" name = \"eventName\" class = \"inputText\" id = \"eventName\" placeholder = \"ex) 구지뽕 축제\" required><br><br>\r\n");
      out.write("                \r\n");
      out.write("                <label for = \"eventImg\" class = \"inputLabel\">행사이미지</label>\r\n");
      out.write("                <input type=\"text\" name = \"eventImg\" class = \"inputText\" id = \"eventImg\" placeholder = \"이미지 주소를 적어주세요 ex) https://google/img\" required><br><br>\r\n");
      out.write("               \r\n");
      out.write("                <label for = \"eventPlace\" class = \"inputLabel\">행사장소</label>\r\n");
      out.write("                <input type=\"text\" name = \"eventPlace\" class = \"inputText\" id = \"eventPlace\"  placeholder = \"ex) 경기도 부천시 여월로 65\" required><br><br>\r\n");
      out.write("              \r\n");
      out.write("                <label for = \"eventDate\" class = \"inputLabel\">행사날짜</label>\r\n");
      out.write("                <input type=\"date\" name = \"eventDate\" class = \"inputText\" id = \"eventDate\"  required><br><br>\r\n");
      out.write("    \r\n");
      out.write("                <label for = \"eventTime\" class = \"inputLabel\">행사시간</label>\r\n");
      out.write("                <input type=\"time\" name = \"eventTime\" class = \"inputText\" id = \"eventTime\" required><br><br>\r\n");
      out.write("                \r\n");
      out.write("             \r\n");
      out.write("                <label for = \"eventIntro\" class = \"inputLabel\">행사 소개 및 안내 내용</label><br><br>\r\n");
      out.write("                <textarea name = \"eventIntro\" class = \"holdTextArea\" id = \"eventIntro\"  placeholder = \"자유롭게 적어주세요! :)\" required></textarea><br><br>\r\n");
      out.write("    \r\n");
      out.write("    \t\t\t<!-- 작성 취소 버튼 -->\r\n");
      out.write("                <input type = \"button\" value = \"취소\" onclick = \"cancel()\" class = \"cancelBtn\">\r\n");
      out.write("                \r\n");
      out.write("                <!-- 작성 완료 버튼 -->\r\n");
      out.write("                <input type = \"submit\" value = \"작성 완료\" id = \"viewEventBtn\" class = \"okBtn\">\r\n");
      out.write("            </form>    \r\n");
      out.write("       </div>\r\n");
      out.write("       \r\n");
      out.write("       <div class = \"holdBg\">\r\n");
      out.write("        \r\n");
      out.write("       </div>\r\n");
      out.write("  \r\n");
      out.write("        <!-- 하단 Gaudium Footer -->\r\n");
      out.write("   \t\t");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "footer.jsp", out, false);
      out.write("\r\n");
      out.write("       \r\n");
      out.write("       <script>\r\n");
      out.write("       \t\tfunction cancel()\r\n");
      out.write("       \t\t{\r\n");
      out.write("       \t\t\tconsole.log(\"취소버튼 누름\");\r\n");
      out.write("       \t\t\tvar confirmCancel = confirm(\"정말로 작성을 취소하시겠습니까?\");\r\n");
      out.write("       \t\t\t\r\n");
      out.write("       \t\t\tif (confirmCancel == true) {\r\n");
      out.write("       \t\t\t   alert(\"작성이 취소되었습니다.\");\r\n");
      out.write("       \t\t\t   location.href = \"index.jsp\";\r\n");
      out.write("       \t\t\t} \r\n");
      out.write("       \t\t\t\r\n");
      out.write("       \t\t\t\r\n");
      out.write("       \t\t}\r\n");
      out.write("       </script>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
